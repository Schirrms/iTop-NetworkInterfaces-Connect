<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.5">
	<constants>
	</constants>
	<classes>
		<class id="lnkConnectableCIToNetworkDevice" _delta="must_exist">
			<fields>
				<field id="network_port" _delta="delete">
				</field>
				<field id="network_port_id" xsi:type="AttributeExternalKey" _delta="define">
					<filter><![CDATA[SELECT PhysicalInterface WHERE connectableci_id= :this->networkdevice_id AND connected_to_id='NULL']]></filter>
					<dependencies>
						<attribute id="connectableci_id"/>
						<attribute id="networkdevice_id"/>
					</dependencies>
					<sql>network_port_id</sql>
					<target_class>PhysicalInterface</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
					<allow_target_creation>true</allow_target_creation>
				</field>
				<field id="network_port_name" xsi:type="AttributeExternalField" _delta="define">
					<extkey_attcode>network_port_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
				<field id="device_port" _delta="delete">
				</field>
				<field id="device_port_id" xsi:type="AttributeExternalKey" _delta="define">
					<filter><![CDATA[SELECT PhysicalInterface WHERE connectableci_id= :this->connectableci_id AND connected_to_id='NULL']]></filter>
					<dependencies>
						<attribute id="connectableci_id"/>
					</dependencies>
					<sql>device_port_id</sql>
					<target_class>PhysicalInterface</target_class>
					<is_null_allowed>false</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
					<allow_target_creation>true</allow_target_creation>
				</field>
				<field id="device_port_name" xsi:type="AttributeExternalField" _delta="define">
					<extkey_attcode>device_port_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
			</fields>
			<methods>
				<method id="AddConnectedNetworkDevice" _delta="redefine">
					<static>false</static>
					<access>protected</access>
					<type>Overload-cmdbAbstractObject</type>
					<code><![CDATA[	protected function AddConnectedNetworkDevice()
	{
		$oDevice = MetaModel::GetObject('ConnectableCI', $this->Get('connectableci_id'));
		if (is_object($oDevice) && (get_class($oDevice) == 'NetworkDevice'))
		{
			$sOQL = "SELECT	lnkConnectableCIToNetworkDevice WHERE connectableci_id = :device AND networkdevice_id = :network AND network_port_id = :nwport AND device_port_id = :devport";
			$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL),
							array(),
							array(
								'network' => $this->Get('connectableci_id'),
								'device' => $this->Get('networkdevice_id'),
								'devport' => $this->Get('network_port_id'),
								'nwport' => $this->Get('device_port_id'),
								)
			);	
			if ($oConnectionSet->Count() == 0)
			{
				$sLink = $this->Get('connection_type');
				$sConnLink = ($sLink == 'uplink') ? 'downlink' : 'uplink';

				$oNewLink = new lnkConnectableCIToNetworkDevice();
				$oNewLink->Set('networkdevice_id', $this->Get('connectableci_id'));
				$oNewLink->Set('connectableci_id', $this->Get('networkdevice_id'));
				$oNewLink->Set('network_port_id', $this->Get('device_port_id'));
				$oNewLink->Set('device_port_id', $this->Get('network_port_id'));
				$oNewLink->Set('connection_type', $sConnLink);
				$oNewLink->DBInsert();	
			}
		}
		// time to feed the 'connected_to_id' in the PhysicalInterface table
		// Step One : Network to edge
		$oIntEdge = MetaModel::GetObject('PhysicalInterface', $this->Get('device_port_id'));
		if (is_object($oIntEdge))
		{
			$sOQL = "SELECT PhysicalInterface WHERE id = :id";
			$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $this->Get('device_port_id'),));
			// There should be one link - do it in a safe manner anyway
			while ($oConnection = $oConnectionSet->Fetch())
			{
				$oConnection->Set('connected_to_id', $this->Get('network_port_id'));
				$oConnection->DBUpdate();
			}
		}
		// Step Two : Edge to network
		$oIntNet = MetaModel::GetObject('PhysicalInterface', $this->Get('network_port_id'));
		if (is_object($oIntNet))
		{
			$sOQL = "SELECT PhysicalInterface WHERE id = :id";
			$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $this->Get('network_port_id'),));
			// There should be one link - do it in a safe manner anyway
			while ($oConnection = $oConnectionSet->Fetch())
			{
				$oConnection->Set('connected_to_id', $this->Get('device_port_id'));
				$oConnection->DBUpdate();
			}
		}
	}]]></code>
				</method>
				<method id="UpdateConnectedNetworkDevice" _delta="redefine">
					<static>false</static>
					<access>protected</access>
					<type>Overload-cmdbAbstractObject</type>
					<code><![CDATA[	protected function UpdateConnectedNetworkDevice()
	{
		$oDevice = MetaModel::GetObject('ConnectableCI', $this->Get('connectableci_id'));
		if (is_object($oDevice) && (get_class($oDevice) == 'NetworkDevice'))
		{
			// Note: in case a port has been changed, search with the original values
			$sOQL = "SELECT	lnkConnectableCIToNetworkDevice WHERE connectableci_id = :device AND networkdevice_id = :network AND network_port_id = :nwport AND device_port_id = :devport";
			$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL),
							array(),
							array(
								'network' => $this->Get('connectableci_id'),
								'device' => $this->Get('networkdevice_id'),
								'devport' => $this->GetOriginal('network_port_id'),
								'nwport' => $this->GetOriginal('device_port_id'),
								)
			);	
			$sLink = $this->Get('connection_type');
			$sConnLink = ($sLink == 'uplink') ? 'downlink' : 'uplink';

			// There should be one link - do it in a safe manner anyway
			while ($oConnection = $oConnectionSet->Fetch())
			{
				$oConnection->Set('connection_type', $sConnLink);
				$oConnection->Set('network_port_id', $this->Get('device_port_id'));
				$oConnection->Set('device_port_id', $this->Get('network_port_id'));
				$oConnection->DBUpdate();	
			}
		}
		// time to update the 'connected_to_id' in the PhysicalInterface table
		// due to my poor understanding of the whole method logic, I start
		// by removing all old connections, then adding the new one. 
		// basically, if there was only one move on the connection, I delete
		// and recreate the other for nothing
		// Step One : Delete existing connections
		$sOQLEdge = "SELECT PhysicalInterface WHERE connected_to_id = :id";
		$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQLEdge), array(), array('id' => $this->Get('device_port_id'),));
		// There should be one link - do it in a safe manner anyway
		while ($oConnection = $oConnectionSet->Fetch())
		{
			$oConnection->Set('connected_to_id', NULL);
			$oConnection->DBUpdate();
		}
		$sOQLNet = "SELECT PhysicalInterface WHERE connected_to_id = :id";
		$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQLNet), array(), array('id' => $this->Get('network_port_id'),));
		// There should be one link - do it in a safe manner anyway
		while ($oConnection = $oConnectionSet->Fetch())
		{
			$oConnection->Set('connected_to_id', NULL);
			$oConnection->DBUpdate();
		}
		// Step Two : rebuild the connections
		$oIntEdge = MetaModel::GetObject('PhysicalInterface', $this->Get('device_port_id'));
		if (is_object($oIntEdge))
		{
			$sOQL = "SELECT PhysicalInterface WHERE id = :id";
			$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $this->Get('device_port_id'),));
			// There should be one link - do it in a safe manner anyway
			while ($oConnection = $oConnectionSet->Fetch())
			{
				$oConnection->Set('connected_to_id', $this->Get('network_port_id'));
				$oConnection->DBUpdate();
			}
		}
		$oIntNet = MetaModel::GetObject('PhysicalInterface', $this->Get('network_port_id'));
		if (is_object($oIntNet))
		{
			$sOQL = "SELECT PhysicalInterface WHERE id = :id";
			$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $this->Get('network_port_id'),));
			// There should be one link - do it in a safe manner anyway
			while ($oConnection = $oConnectionSet->Fetch())
			{
				$oConnection->Set('connected_to_id', $this->Get('device_port_id'));
				$oConnection->DBUpdate();
			}
		}
	}]]></code>
				</method>
				<method id="DeleteConnectedNetworkDevice" _delta="redefine">
					<static>false</static>
					<access>protected</access>
					<type>Overload-cmdbAbstractObject</type>
					<code><![CDATA[	protected function DeleteConnectedNetworkDevice()
	{
		// The device might be already deleted (reentrance in the current procedure when both device are NETWORK devices!)
		$oDevice = MetaModel::GetObject('ConnectableCI', $this->Get('connectableci_id'), false);
		if (is_object($oDevice) && (get_class($oDevice) == 'NetworkDevice'))
		{
			// Track and delete the counterpart link
			$sOQL = "SELECT	lnkConnectableCIToNetworkDevice WHERE connectableci_id = :device AND networkdevice_id = :network AND network_port_id = :nwport AND device_port_id = :devport";
			$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL),
							array(),
							array(
								'network' => $this->Get('connectableci_id'),
								'device' => $this->Get('networkdevice_id'),
								'devport' => $this->Get('network_port_id'),
								'nwport' => $this->Get('device_port_id'),
								)
			);
			// There should be one link - do it in a safe manner anyway
			while ($oConnection = $oConnectionSet->Fetch())
			{
				$oConnection->DBDelete();	
			}
		}	
		// time to clean up the 'connected_to_id' in the PhysicalInterface table
		// The cleanup is a little harsh. Search for all occurences of the disconnected port
		// Step One : Network to edge
		$sOQL = "SELECT PhysicalInterface WHERE connected_to_id = :id";
		$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $this->Get('device_port_id'),));
		// There should be one link - do it in a safe manner anyway
		while ($oConnection = $oConnectionSet->Fetch())
		{
			$oConnection->Set('connected_to_id', NULL);
			$oConnection->DBUpdate();
		}
		// Step Two : Edge to network
		$sOQL = "SELECT PhysicalInterface WHERE connected_to_id = :id";
		$oConnectionSet = new DBObjectSet(DBObjectSearch::FromOQL($sOQL), array(), array('id' => $this->Get('network_port_id'),));
		// There should be one link - do it in a safe manner anyway
		while ($oConnection = $oConnectionSet->Fetch())
		{
			$oConnection->Set('connected_to_id', NULL);
			$oConnection->DBUpdate();
		}
	}]]></code>
				</method>
			</methods>
			<presentation>
				<details>
					<items>
						<item id="network_port" _delta="delete">
						</item>
						<item id="network_port_id" _delta="define">
							<rank>30</rank>
						</item>
						<item id="device_port" _delta="delete">
						</item>
						<item id="device_port_id" _delta="define">
							<rank>40</rank>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="network_port" _delta="delete">
						</item>
						<item id="network_port_id" _delta="define">
							<rank>30</rank>
						</item>
						<item id="device_port" _delta="delete">
						</item>
						<item id="device_port_id" _delta="define">
							<rank>40</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="network_port" _delta="delete">
						</item>
						<item id="network_port_id" _delta="define">
							<rank>30</rank>
						</item>
						<item id="device_port" _delta="delete">
						</item>
						<item id="device_port_id" _delta="define">
							<rank>40</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
		<class id="PhysicalInterface" _delta="must_exist">
			<fields>
				<field id="connected_to_id" xsi:type="AttributeExternalKey" _delta="define">
					<sql>connected_to_id</sql>
					<target_class>PhysicalInterface</target_class>
					<is_null_allowed>true</is_null_allowed>
					<on_target_delete>DEL_AUTO</on_target_delete>
					<edit_mode _target="force">none</edit_mode>
				</field>
				<field id="connected_to_name" xsi:type="AttributeExternalField" _delta="define">
					<extkey_attcode>connected_to_id</extkey_attcode>
					<target_attcode>name</target_attcode>
				</field>
			</fields>
			<presentation>
				<details>
					<items>
						<item id="connected_to_id" _delta="define">
							<rank>100</rank>
						</item>
					</items>
				</details>
				<search>
					<items>
						<item id="connected_to_id" _delta="define">
							<rank>100</rank>
						</item>
					</items>
				</search>
				<list>
					<items>
						<item id="connected_to_id" _delta="define">
							<rank>100</rank>
						</item>
					</items>
				</list>
			</presentation>
		</class>
	</classes>
	<user_rights>
		<groups>
		</groups>
		<profiles>
		</profiles>
	</user_rights>
</itop_design>
